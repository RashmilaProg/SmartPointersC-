Implementing shared_ptr in C++: A Simplified Overview

By using shared_ptr, more than one pointer can point to same object at a time, and it will maintain a reference counter using the use_count() method.
#include <bits/stdc++.h>
using namespace std;

class Rectangle {
    int length;
    int breadth;

public:
    Rectangle(int l, int b) {
        length = l;
        breadth = b;
    }
    int area() { return length * breadth; }
};

int main() {
    
    shared_ptr<Rectangle> P1(new Rectangle(10, 5));
    cout << P1->area() << endl;

    shared_ptr<Rectangle> P2;
    
    // P1 and P2 are pointing 
    // to same object
    P2 = P1;
    cout << P2->area() << endl;
    cout << P1->area() << endl;
    cout << P1.use_count();
    return 0;
}
The standard library's std::shared_ptr is a robust smart pointer designed for managing dynamically allocated objects with shared ownership. Multiple shared_ptr instances can point to the same object, and the object is automatically deallocated when the last shared_ptr relinquishes ownership, ensuring memory is properly managed and preventing leaks. 
Here's a simplified implementation to illustrate the core concepts:

cpp
template <typename T>
class MySharedPtr {
public:
    // Constructor
    explicit MySharedPtr(T* ptr = nullptr) :
        m_ptr(ptr),
        m_count(new int(1)) // Initialize reference count to 1
    {
    }

    // Copy Constructor
    MySharedPtr(const MySharedPtr& other) :
        m_ptr(other.m_ptr),
        m_count(other.m_count)
    {
        (*m_count)++; // Increment reference count
    }

    // Copy Assignment Operator
    MySharedPtr& operator=(const MySharedPtr& other) {
        if (this != &other) { // Avoid self-assignment
            // Decrement old reference count and potentially delete object
            release();
            m_ptr = other.m_ptr;
            m_count = other.m_count;
            (*m_count)++; // Increment new reference count
        }
        return *this;
    }

    // Destructor
    ~MySharedPtr() {
        release();
    }

    // Dereference Operator
    T& operator*() const {
        return *m_ptr;
    }

    // Arrow Operator
    T* operator->() const {
        return m_ptr;
    }

    // Get raw pointer
    T* get() const {
        return m_ptr;
    }

    // Get reference count
    int use_count() const {
        return *m_count;
    }

private:
    T* m_ptr; // Pointer to the managed object
    int* m_count; // Pointer to the reference count

    void release() {
        (*m_count)--;
        if (*m_count == 0) {
            delete m_ptr;
            delete m_count;
        }
    }
};
Use code with caution.

Key concepts and mechanisms
1. Reference counting
Each shared_ptr instance sharing ownership of an object maintains a pointer to a shared "control block", which stores the reference count (the number of shared_ptr instances currently pointing to the object).
When a shared_ptr is copied or assigned, the reference count is incremented.
When a shared_ptr goes out of scope or is reset, the reference count is decremented. 

2. Automatic deallocation
When the reference count reaches zero, meaning no more shared_ptr instances are pointing to the object, the control block automatically deletes the managed object and itself. 

3. Thread safety (reference counting only)
Crucially, the increments and decrements of the reference count are guaranteed to be thread-safe in the standard library's std::shared_ptr due to the use of atomic operations.
However, it's vital to note that this thread safety applies only to the reference count itself, not to access or modification of the object pointed to by the shared_ptr. 

Important considerations
1. Object access in a multi-threaded environment
If multiple threads access and potentially modify the object pointed to by a shared_ptr, you must implement appropriate synchronization mechanisms (like mutexes) to prevent data races and ensure thread safety for the object's data. 

2. Avoiding circular dependencies
The reference counting mechanism can lead to a problem known as a "circular dependency" or "cyclic reference" where two or more objects hold shared_ptr instances to each other, preventing them from being deleted even after they're no longer needed, resulting in memory leaks.
This can be addressed using std::weak_ptr instances for non-owning references, allowing objects to be deallocated when their shared_ptr owners are gone. 

3. std::make_shared
For improved performance and safety, prefer using std::make_shared to create and initialize shared_ptr objects. It performs a single memory allocation for both the object and its control block, reducing overhead and improving efficiency.
If a custom deleter is required (e.g., to manage non-memory resources like file handles or objects requiring special deletion procedures), use the std::shared_ptr constructor that accepts a custom deleter. 
In essence, shared_ptr simplifies memory management by automating deallocation and offering shared ownership semantics through reference counting. However, be mindful of thread safety for the managed object itself and potential circular dependencies, using std::weak_ptr when appropriate. 
